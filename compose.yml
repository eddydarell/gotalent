services:
  # Landing page service
  landing:
    image: nginx:alpine
    container_name: gotalent-landing
    ports:
      - "13001:80"
    volumes:
      - ./landing:/usr/share/nginx/html:ro
    restart: unless-stopped
    networks:
      - gotalent-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:80",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Registration form service
  form:
    build:
      context: ./form
      dockerfile: Dockerfile
    container_name: gotalent-form
    ports:
      - "13002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_PATH=/data/gotalent.db
    volumes:
      - gotalent-data:/data
    restart: unless-stopped
    networks:
      - gotalent-network
    depends_on:
      - db-init
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3002/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Badge generator service
  badge:
    build:
      context: ./badge
      dockerfile: Dockerfile
    container_name: gotalent-badge
    ports:
      - "13003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_PATH=/data/gotalent.db
    volumes:
      - gotalent-data:/data
    restart: unless-stopped
    networks:
      - gotalent-network
    depends_on:
      - db-init
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3003/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scanner service
  scanner:
    build:
      context: ./scanner
      dockerfile: Dockerfile
    container_name: gotalent-scanner
    ports:
      - "13004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_PATH=/data/gotalent.db
    volumes:
      - gotalent-data:/data
    restart: unless-stopped
    networks:
      - gotalent-network
    depends_on:
      - db-init
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3004/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database initialization service
  db-init:
    image: oven/bun:1
    container_name: gotalent-db-init
    volumes:
      - gotalent-data:/data
      - ./data/init-db.sql:/init-db.sql:ro
      - ./data/init-db.js:/init-db.js:ro
    command: >
      sh -c "
        if [ ! -f /data/gotalent.db ]; then
          echo 'Initializing database...';
          bun run /init-db.js;
          echo 'Database initialized successfully';
        else
          echo 'Database already exists, skipping initialization';
        fi
      "
    networks:
      - gotalent-network

  # Adminer - Database management interface
  adminer:
    image: adminer:latest
    container_name: gotalent-adminer
    ports:
      - "13080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=sqlite
      - ADMINER_DESIGN=nette
    volumes:
      - gotalent-data:/data
    restart: unless-stopped
    networks:
      - gotalent-network
    depends_on:
      - db-init

  # Caddy reverse proxy
  caddy:
    image: caddy:2-alpine
    container_name: gotalent-caddy
    ports:
      - "13000:80"
      - "13443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped
    networks:
      - gotalent-network
    depends_on:
      - landing
      - form
      - badge
      - scanner
      - adminer

networks:
  gotalent-network:
    driver: bridge

volumes:
  gotalent-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
  caddy_data:
    driver: local
  caddy_config:
    driver: local
